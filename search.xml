<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[To kill a Mockingbird]]></title>
      <url>/2018/03/09/To-kill-a-Mockingbird/</url>
      <content type="html"><![CDATA[<h3 style="text-align:center">知更鸟什么坏事都不做，只是衷心的唱歌给我们听，这就是为什么说杀死一只知更鸟就是罪恶。</h3>


<h3 id="成就"><a href="#成就" class="headerlink" title="#成就"></a>#成就</h3><p>&emsp;&emsp;《杀死一只知更鸟》（英语：To Kill a Mockingbird），直译应为“杀死一只反舌鸟”，台译“梅冈城故事”，是美国作家<a href="https://zh.wikipedia.org/wiki/%E5%93%88%E6%B3%A2%C2%B7%E6%9D%8E" target="_blank" rel="noopener"><strong>哈珀·李</strong></a>于1960年发行的小说，荣获当年度<em>普利策奖</em>。此书刚出版便获得极大成功，取材自作者对其家人与邻居的观察以及发生在作者10岁时（1936年）故乡附近的一起事件。<br>&emsp;&emsp;虽然故事题材涉及种族不平等与强暴等严肃议题，其文风仍温暖风趣。小说以第一人称著成，叙述者的父亲<strong>阿提克斯·芬奇</strong>在书中为道德端正的角色，亦是正直律师的典范。一名评论家这样解释小说有巨大影响力的原因：“在二十世纪，《杀死一只知更鸟》大概是美国最广为阅读的种族相关书籍，而它的主角<strong>阿提克斯·芬奇</strong>则塑造了种族正义最不朽的小说形象。”<br>&emsp;&emsp;《杀死一只知更鸟》是一部南方哥德小说与教育小说，主题涉及种族歧视与滥判无辜。学者指出哈珀·李着墨于阶级、勇气、同理心，以及美国南部诸州性别角色议题。在英语系国家，《杀死一只知更鸟》常被纳入学校教材中，传递宽恕和反偏见的信息。《杀死一只知更鸟》也因其种族歧视性语言而被列为文学挑战性书目（有部分争议性的书籍）。</p>
<center><img src="http://p02zvk8jf.bkt.clouddn.com/to_kill_a_mockingbird.jpg" alt="杀死一只知更鸟是罪恶"></center>


<h3 id="内容简介"><a href="#内容简介" class="headerlink" title="#内容简介"></a>#内容简介</h3><blockquote>
<p>以下内容将会毫无防备的侵袭你的身体，吞噬你。<br>咳咳咳，内容会剧透了，你看着办吧。</p>
</blockquote>
<p>&emsp;&emsp;美国南部的梅岗镇上住着父亲芬奇(格利高里·派克 Gregory Peck 饰)和他的一对儿女。尽管妻子已经亡故，一家人仍过得乐也融融，芬奇对儿女亦既严格又疼爱有加。父亲平时还对他们说过，不要杀死为人类唱歌的知更鸟，因为她们善良而从不伤害人。<br>&emsp;&emsp;芬奇除了是一个慈父，还是当地一名勇于伸张正义的律师。这天他接到一宗强奸案，被告是黑人罗宾逊（布洛克·皮特Brock Peters 饰），而受害者是一名白人女子。这样一个案件，在那个种族歧视相当严重的年代，罗宾逊的境况堪忧。即使芬奇找到了他没有犯罪的证据，也不足以让人们抛开种族成见。芬奇在法庭上奋力维护事实和法律的公正，然而却没能阻止人们根深蒂固的偏见。更糟糕的是，怀有种族偏见的白人已经把芬奇当作公敌，而罗宾逊也无法洗清罪名，更可悲的命运在等待着他。</p>
<h3 id="小说背景"><a href="#小说背景" class="headerlink" title="#小说背景"></a>#小说背景</h3><p>&emsp;&emsp;哈珀·李出生于1926年，在阿拉巴马州门罗维尔的南部小镇长大，与著名作家杜鲁门·卡波特是童年好友。1944年，哈珀·李前往蒙哥马利就读亨廷顿学院（1944–45年），随后在阿拉巴马大学攻读法律（1945–49年）。就读大学期间，她为学校文学杂志写作，向亨廷顿的《女猎手》和阿拉巴马大学的幽默杂志《夯土机》投稿。在两所大学中，她都写了有关种族歧视的作品，而这个主题在当时的校园内甚少为人讨论。1950年，李去了纽约城，并在英国海外航空公司那里做了一名订票员；此时，她开始记叙门罗维尔的人和事。1957年，李将她的作品交给卡波特推荐的文学代理人，希望能将其出版。J. B. Lippincott &amp; Co.的一位编辑建议她辞职，专心写作。在迈克、乔·布朗、爱丽丝·李·芬奇等朋友的资助下，李不间断地写作了一年。<br>&emsp;&emsp;最终，李花了两年半的时间写就了《杀死一只知更鸟》。美国艺术基金会(National Endowment for the Arts)叙述了一幕情景︰当时李变得如此沮丧，以至将手稿扔出了窗外雪地上。然而，代理人又要她将手稿捡回来。小说在1960年7月11日出版，原题为《阿提克斯》。李将其改名，以使小说的意义超越简单的人物描绘。利平科特的编辑团队警告李，说可能只卖得出几千本。1964年，李在回忆她对小说的期望时说：“我从未期望《杀死一只知更鸟》能获得什么成功……我希望它在评论家笔下能迅速而安详地逝去，与此同时，我希望有人会给我一些鼓励，公众的鼓励。我说，我期望能有一点，但我得到了很多，某种程度上，这和我所期望的迅速而安详的逝去一样令人恐惧。”小说非但没有“迅速而安详的逝去”，却经《读者文摘》合订版将小说再版选定之后一夜成名。</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="#目录"></a>#目录</h3><blockquote>
<p>– 第一章 – 第二章 – 第三章 – 第四章 – 第五章 – 第六章 – 第七章 – 第八章 – 第九章 – 第十章 – 第十一章<br>  – 第十二章 – 第十三章 – 第十四章 – 第十五章 – 第十六章 – 第十七章 – 第十八章 – 第十九章 – 第二十章<br>  – 第二十一章 – 第二十二章 – 第二十三章 – 第二十四章 – 第二十五章 – 第二十六章 – 第二十七章 – 第二十八章<br>  – 第二十九章 – 第三十章 – 第三十一章</p>
</blockquote>
<h3 id="骨骼"><a href="#骨骼" class="headerlink" title="#骨骼"></a>#骨骼</h3><blockquote>
<p>因为是以8岁小孩的眼光来描述的，小说非常易懂，文字也直白、幽默，特别易读。<br>以下内容会有些凌乱，恕我无能，（留下了没有技术的泪水.jpg）<br>小说一共有俩条线，一条线是三个小孩子与布的故事，还有一条是阿提克斯为黑人鲁滨逊打官司的故事</p>
</blockquote>
<p>&emsp;&emsp;小说的开始讲述了<strong>芬奇</strong>的祖先，康沃尔卫理公会的<strong>西门·芬奇</strong>，为了逃脱英格兰的宗教迫害，定居在阿拉巴马、致富、并违背教义买了奴隶的故事。</p>
<blockquote>
<p>倘若你有兴趣读这本书的话，以下文字可能会剧透，请屏幕前的你慎重阅读，你读了，要是怀孕了，不要过来找我。</p>
</blockquote>
<p><img src="http://p02zvk8jf.bkt.clouddn.com/ToKillAMockingbird.jpg" alt="剧透高能预警"></p>
<p>&emsp;&emsp;小说的一条线：一开始讲的是梅康镇里三个小孩子与布的故事，由于<em>布·拉德力</em>被认为是阴险恶毒的幽灵似的人物，干净坏事，就连黑人都不敢从他家房子门口经过。同时这股神秘感使三个小孩子产生了极大的好奇心，并且每天能在他家门外的树洞里发现一些礼物，由此更加好奇。因此三个小孩子希望能把他引诱出门，看看他的正面目。<br>&emsp;&emsp;小说另一条线：<em>阿提克斯(Atticus)</em>无疑是这本书的正面人物，为了心中的正义与公平，宁为万夫指也要追求公平公正。在一个种族歧视的环境里，黑人永远都是处于低人一等，虽然小说开头已经说明了，买卖黑奴是违法犯罪的，但是还是有这种现象，并且没有绳之以法，没人管。作为一名律师，<em>阿提克斯(Atticus)</em>被法院指定为<em>汤姆·鲁滨逊</em>辩护，鲁滨逊被指控为强奸白人女子<em>梅薏拉·尤厄尔</em>，镇子里的人都反对并且对阿提克斯抛以鄙视的眼光，连镇里的孩子们都嘲笑前文的三个孩子（阿提克斯是杰姆和斯各特的父亲），称他们的父亲是一个“爱黑鬼的家伙”。斯各特甚至被挑衅为她父亲的荣誉而打架，而父亲告诉她别这么做。<br>&emsp;&emsp;阿提克斯面对一群想要将汤姆处以私刑的人，由于斯各特、杰姆和迪尔的突然出现，使得暴徒们不得不被迫从阿提克斯与汤姆的角度来考虑问题，因此倍感羞愧，四散离去，危机得到了化解。当绝望的汤姆越狱被杀时，杰姆与阿提克斯对司法公正的信念受到了极大的打击。虽然<em>鲍伯·尤厄尔</em>胜诉，但他的名声扫地，他气急败坏的誓言报复。<em>鲍伯</em>当街淬了<em>阿提克斯</em>的脸，试图闯入审判法官的家骚扰<em>汤姆·鲁滨逊</em>的遗孀。<br>&emsp;&emsp;小说把前面俩条看似没有任何关联的线在最后结尾的时候合并了，这体现了作者的一定写作功底。<br>&emsp;&emsp;小说最后：一天晚上，当<em>杰姆</em>和<em>斯</em>各特从学校的万圣节盛会回家的时候，<em>鲍伯</em>突然对他们痛下毒手。<em>杰姆</em>的胳膊在打斗中折断，但在混乱中，一位陌生人救出了孩子们，这位神秘人将<em>杰姆</em>扛回家，<em>斯各特</em>认出他就是<em>布·拉德力</em>。梅康镇的警长来到并发现<em>鲍伯·尤厄尔</em>死于缠斗。警长与阿提克斯进行辩论，试图确认<em>杰姆</em>和<em>鲍伯</em>俩人谁该负责。<em>阿提克斯</em>最终接受了警长的观点：<em>尤厄尔</em>摔到了自己的刀上。<em>布请斯</em>各特送他回家，在道别之后，他再度消失。站在<em>拉德力</em>的门外，<em>斯各特</em>为他们无法偿还之前的礼物而深表遗憾。<br>&emsp;&emsp;<em>阿瑟·布·拉德力（Arthur Boo Radley）</em>象征无辜的受害者，也是小说中最重要的“反舌鸟”。他是隐蔽人士。杰姆和斯各特童年时都把他看成恐怖的代名词。但他常为孩子们留下一些陈旧的小礼物，并且在杰姆和斯各特被袭击时拯救了他们。他十分善良。他象征了人类的罪恶对公义与善良造成威胁。布在最后出现在公众的眼光中，但并不是令人生畏的角色，而是<strong>正义</strong>的角色，保护了三个小孩子，并且维护了小孩子们心中的正义。</p>
<h4 id="对社会的思考"><a href="#对社会的思考" class="headerlink" title="@对社会的思考"></a>@对社会的思考</h4><p>&emsp;&emsp;1930年和1960年出现的问题依然困扰着当今社会：我们仍然没有完全消除种族歧视或者精英统治论，对于精神疾病治疗方面，我们仍在苦苦挣扎。总而言之，现在的美国还是面临着所谓的“仇恨犯罪”带来的种种问题（1930年，人们都未曾使用过该术语）。2016年一项联邦调查报告“显示有5850起刑事时间和6885起相关罪行都是由种族，地域，血统，信仰，性向，残疾，性别和性别错位带来的歧视所引发的。<br>&emsp;&emsp;在杀死一只知更鸟中，血统成为了误解和造成偏见的主要原因。</p>
<h3 id="灵魂"><a href="#灵魂" class="headerlink" title="#灵魂"></a>#灵魂</h3><blockquote>
<p>斯各特，大多数人都是好人，在你终于了解他们以后。</p>
<p>但是，在处理好与他人的关系之前，我首先得处理好与自己的关系。大多数人公认的准则是应当遵守的，但如果这样做违背了一个人的良心，就不应当遵守。只有在这种情况下才可以不遵守。</p>
<p>你只要明白这一件事，斯科特，你与形形色色的人都会交往得更好。你永远也无法真正理解一个人，直到你用他的眼睛来看世界……直到你钻进他的皮肤，和他一起走路。</p>
<p>有一种东西不能遵循从众原则，那就是人的良心。</p>
<p>我敢保证，在这个法庭上，没有谁没有撒过谎，没有谁没有做过不道德的事情！在这个世界上，没有一个男人不曾带着肉欲瞧过女人。</p>
<p>我想让你了解了解她，让你见识见识真正的勇敢是什么，而不要总认为男子手里拿支枪才是勇敢。真正的勇敢是，在行动之前就知道要失败，但还是要行动，不管怎样，要进行到底。你往往失败，但有时候你也能取得胜利。</p>
<p>永远都不要从别人的口中去认识一个人，不要相信流言蜚语。<br>直到你亲自去接触他的时候，你才能够看见事实。 </p>
<p>知更鸟什么坏事都不做，只是衷心的唱歌给我们听，这就是为什么说杀死一只知更鸟就是罪恶。</p>
<p>有些黑人撒谎，有些黑人不道德，有些黑人在女人面前不规矩——不管她们是黑神女人还是白种女人。但是，这种真相适用于人类所有的种族，而不仅仅是某个特殊的种族。在这个法庭里的人，没有人没撒过谎，没有人没做过不道德的事，没有一个男人会看女人时从来不带欲望。</p>
<p>阿蒂克斯使用了所有能开释一个自由人的法律手段去拯救汤姆，可是在人们内心深处的那个秘密法庭里，阿蒂克斯根本没有任何诉讼可言。从马耶拉张嘴喊叫的那一刻起，汤姆就死定了。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 灵魂读者 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 灵性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[pythonの旅]]></title>
      <url>/2018/01/27/python-1/</url>
      <content type="html"><![CDATA[<h1 style="text-align:center">人生苦短，我用python</h1>

<h3 id="前世今生"><a href="#前世今生" class="headerlink" title="# 前世今生"></a># 前世今生</h3><p>&emsp;&emsp;Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/）, 是一种面向对象的解释型计算机程序设计语言，由荷兰人<a href="https://baike.baidu.com/item/Guido%20van%20Rossum" target="_blank" rel="noopener">吉多·范罗苏姆（Guido van Rossum）</a>于1989年发明，第一个公开发行版发行于1991年。<br>&emsp;&emsp;作为一种<strong>解释型语言</strong>，Python的设计哲学强调代码的可读性和简洁的语法（尤其是使用空格缩进(white space)划分代码块，而非使用大括号或者关键词）。相比于 C++ 或 Java，Python 让开发者能够用更少的代码表达想法。不管是小型还是大型程序，该语言都试图让程序的结构清晰明了。<br>&emsp;&emsp;Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议。<br>&emsp;&emsp;Python具有丰富和强大的库。它常被昵称为<strong>胶水语言</strong>，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。常见的一种应用情形是，使用Python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，性能要求特别高，就可以用C/C++重写，而后封装为Python可以调用的扩展类库。需要注意的是在您使用扩展类库时可能需要考虑平台问题，某些可能不提供跨平台的实现。</p>
<hr>
<p>&emsp;&emsp;1989年的圣诞节期间，吉多·范罗苏姆为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。之所以选中Python作为程序的名字，是因为他是BBC电视剧——蒙提·派森的飞行马戏团的爱好者。ABC是由吉多参加设计的一种教学语言。就吉多本人看来，ABC这种语言非常优美和强大，是专门为非专业程序员设计的。但是ABC语言并没有成功，究其原因，吉多认为是非开放造成的。吉多决心在Python中避免这一错误，并获取了非常好的效果，完美结合了C和其他一些语言，并且结合了Unix shell和C的习惯。<br>&emsp;&emsp;Python开发者有意让违反了缩进规则的程序不能通过编译，以此来强制程序员养成良好的编程习惯。并且Python语言利用缩进表示语句块的开始和退出（Off-side规则），而非使用花括号<code>{}</code>或者某种关键字。增加缩进表示语句块的开始，而减少缩进则表示语句块的退出。缩进成为了语法的一部分。</p>
<center><img src="http://p02zvk8jf.bkt.clouddn.com/pythonBG2.jpg" alt="python"></center>

<h3 id="应用领域"><a href="#应用领域" class="headerlink" title="# 应用领域"></a># 应用领域</h3><p>&emsp;&emsp;作为一门语言，自然有他应用的领域，接下来我们就来讨论一下python可以用于哪些高大上的领域。</p>
<h4 id="Web-程序"><a href="#Web-程序" class="headerlink" title="@ Web 程序"></a>@ Web 程序</h4><p>&emsp;&emsp;Python经常被用于Web开发。比如，通过mod_wsgi模块，Apache可以运行用Python编写的Web程序。使用Python语言编写的Gunicorn作为Web服务器，也能够运行Python语言编写的Web程序。Python定义了WSGI标准应用接口来协调Http服务器与基于Python的Web程序之间的沟通。一些Web框架，如Django、Pyramid、TurboGears、Tornado、web2py、Zope、Flask等，可以让程序员轻松地开发和管理复杂的Web程序。<br>&emsp;&emsp;Python对于各种网络协议的支持很完善，因此经常被用于<strong>编写服务器软件</strong>、<strong>网络爬虫</strong>。第三方库Twisted支持异步在线编写程序和多数标准的网络协议（包含客户端和服务器），并且提供了多种工具，被广泛用于编写高性能的服务器软件。另有gevent这个流行的第三方库，同样能够支持高性能高并发的网络开发。</p>
<h4 id="GUI-开发"><a href="#GUI-开发" class="headerlink" title="@ GUI 开发"></a>@ GUI 开发</h4><p>&emsp;&emsp;Python本身包含的Tkinter库能够支持简单的GUI（图形界面）开发。但是越来越多的Python程序员选择wxPython或者PyQt等GUI包来开发跨平台的桌面软件。使用它们开发的桌面软件运行速度快，与用户的桌面环境相契合。通过PyInstaller还能将程序发布为独立的安装程序包。<br>&emsp;&emsp;在国内，我们可爱的攻城狮在这方面做的比较的少，一般都是使用pyQt，说明在这GUI方面的开发，我国还是一块大蛋糕。</p>
<h4 id="操作系统"><a href="#操作系统" class="headerlink" title="@ 操作系统"></a>@ 操作系统</h4><p>&emsp;&emsp;在很多操作系统里，Python是标准的系统组件。大多数Linux发行版和Mac OS X都集成了Python，可以在终端机下直接运行Python。有一些Linux发行版的安装器使用Python语言编写，比如Ubuntu的Ubiquity安装器、Red Hat Linux和Fedora的Anaconda安装器。在RPM系列Linux发行版中，有一些系统组件就是用Python编写的。Gentoo Linux使用Python来编写它的Portage软件包管理系统。Python标准库包含了多个调用作业系统功能的库。通过pywin32这个第三方软件包，Python能够访问Windows的COM服务及其它Windows API。使用IronPython，Python程序能够直接调用.Net Framework。</p>
<h4 id="科学计算"><a href="#科学计算" class="headerlink" title="@ 科学计算"></a>@ 科学计算</h4><p>&emsp;&emsp;Python可以广泛的在科学计算领域发挥独特的角色。有许多模块可以帮助你在计算巨型数组、矢量分析、神经网络等方面高效率完成工作。尤其是在教育科研方面，可以发挥出独特的优势。<br>&emsp;&emsp;不过你做这方面的一定是对<strong>数学</strong>有很高的造诣，要是对<strong>数学</strong>不感冒的话，不深入研究<strong>数学</strong>，你要是进入这个应用领域还是早点退出吧。你还年轻！（这里重点强调三次【数学Math】）</p>
<blockquote>
<p>python的应用方面还有很多，这里只列举一些比较常用的，热门的方向。</p>
</blockquote>
<h3 id="语法Grammar"><a href="#语法Grammar" class="headerlink" title="# 语法Grammar"></a># 语法Grammar</h3><p>&emsp;&emsp;这里简单介绍一下python的几个语法，其实大部分机器语言的语法还是一样的，都是大同小异。</p>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="@ 数据类型"></a>@ 数据类型</h4><p>&emsp;&emsp;作为一个机器语言，毕竟是要给机器看的，都得告诉她你给她的是什么，要她怎么做。但python不同于其他OOP（面向对象编程）语言一样，需要写出数据的类型，例如 C++ 中需要定义<code>int</code>类型或者是<code>bool</code>类型。python只需要你给她，不需要和她解释东西，就像人会分析会思考一样，python把这以过程智能化了，不需要你操心这些变量的类型。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>str</code></td>
<td>一个由字符组成的不可更改的有序列。在Python 3.x里，字符串由Unicode字符组成。</td>
<td><code>&#39;Wikipedia&#39;</code> <code>&quot;Wikipedia&quot;</code> <code>&quot;&quot;&quot;Spanningmultiplelines&quot;&quot;&quot;</code></td>
</tr>
<tr>
<td><code>bytes</code></td>
<td>一个由字节组成的不可更改的有序列。</td>
<td><code>b&#39;Some ASCII&#39;</code> <code>b&quot;Some ASCII&quot;</code></td>
</tr>
<tr>
<td><code>list</code></td>
<td>可以包含多种类型的可改变的有序列</td>
<td><code>[4.0, &#39;string&#39;, True]</code></td>
</tr>
<tr>
<td><code>tuple</code></td>
<td>可以包含多种类型的不可改变的有序列</td>
<td><code>(4.0, &#39;string&#39;, True)</code></td>
</tr>
<tr>
<td><code>set</code>, <code>frozenset</code></td>
<td>与数学中集合的概念类似。无序的、每个元素唯一。</td>
<td><code>{4.0, &#39;string&#39;, True}</code> <code>frozenset([4.0, &#39;string&#39;, True])</code></td>
</tr>
<tr>
<td><code>dict或map</code></td>
<td>一个可改变的由键值对组成的无序列。</td>
<td><code>{&#39;key1&#39;: 1.0, 3: False}</code></td>
</tr>
<tr>
<td><code>int</code></td>
<td>精度不限的整数</td>
<td><code>42</code></td>
</tr>
<tr>
<td><code>float</code></td>
<td>浮点数。精度与系统相关。</td>
<td><code>3.1415927</code></td>
</tr>
<tr>
<td><code>complex</code></td>
<td>复数</td>
<td><code>3+2.7j</code></td>
</tr>
<tr>
<td><code>bool</code></td>
<td>逻辑值。只有两个值：真、假</td>
<td><code>True</code> <code>False</code></td>
</tr>
</tbody>
</table>
<p>栗子：<br><img src="http://p02zvk8jf.bkt.clouddn.com/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%B5%8B%E8%AF%95.png" alt="数据类型测试"></p>
<h4 id="语句和控制流"><a href="#语句和控制流" class="headerlink" title="@ 语句和控制流"></a>@ 语句和控制流</h4><ul>
<li><code>if</code>语句，当条件成立时运行语句块。经常与<code>else</code>, <code>elif</code>（相当于<code>else if</code>）配合使用。</li>
<li><code>for</code>语句，遍列列表、字符串、字典、集合等迭代器，依次处理迭代器中的每个元素。</li>
<li><code>while</code>语句，当条件为真时，循环运行语句块。</li>
<li><code>try</code>语句。与<code>except, finally, else</code>配合使用处理在程序运行中出现的异常情况。</li>
<li><code>class</code>语句。用于定义类型。</li>
<li><code>def</code>语句。用于定义函数和类型的方法。</li>
<li><code>pass</code>语句。表示此行为空，不运行任何操作。</li>
<li><code>assert</code>语句。用于程序调适阶段时测试运行条件是否满足。</li>
<li><code>with</code>语句。Python2.6以后定义的语法，在一个场景中运行语句块。比如，运行语句块前加锁，然后在语句块运行结束后释放锁。</li>
<li><code>yield</code>语句。在迭代器函数内使用，用于返回一个元素。自从Python 2.5版本以后。这个语句变成一个运算符。</li>
<li><code>raise</code>语句。抛出一个异常。</li>
<li><code>import</code>语句。导入一个模块或包。常用写法：<code>from module import name, import module as name, from module import name as anothername</code></li>
</ul>
<h3 id="丰富的库文件"><a href="#丰富的库文件" class="headerlink" title="#丰富的库文件"></a>#丰富的库文件</h3><p>&emsp;&emsp;python之所以强大，不仅在于它拥有标准库，还拥有许多第三方库，利用这些库文件可以创造任何你想创造的。<br>以下分领域列举一些<strong>著名第三方库</strong></p>
<h4 id="Web框架"><a href="#Web框架" class="headerlink" title="@ Web框架"></a>@ Web框架</h4><ul>
<li><strong>jango</strong><br>开源Web开发框架，它鼓励快速开发,并遵循MVC设计，开发周期短。</li>
<li><strong>Flask</strong><br>轻量级的Web框架。</li>
<li><strong>Pyramid</strong><br>轻量，同时有可以规模化的Web框架，Pylon projects 的一部分。</li>
<li><strong>ActiveGrid</strong><br>企业级的Web2.0解决方案。</li>
<li><strong>Karrigell</strong><br>简单的Web框架，自身包含了Web服务，py脚本引擎和纯python的数据库PyDBLite。</li>
<li><strong>Tornado</strong><br>一个轻量级的Web框架，内置非阻塞式服务器，而且速度相当快</li>
<li><strong>webpy</strong><br>一个小巧灵活的Web框架，虽然简单但是功能强大。</li>
<li><strong>CherryPy</strong><br>基于Python的Web应用程序开发框架。</li>
<li><strong>Pylons</strong><br>基于Python的一个极其高效和可靠的Web开发框架。</li>
<li><strong>Zope</strong><br>开源的Web应用服务器。</li>
<li><strong>TurboGears</strong><br>基于Python的MVC风格的Web应用程序框架。</li>
<li><strong>Twisted</strong><br>流行的网络编程库，大型Web框架。</li>
<li><strong>Quixote</strong><br>Web开发框架。</li>
</ul>
<h4 id="科学计算-1"><a href="#科学计算-1" class="headerlink" title="@ 科学计算"></a>@ 科学计算</h4><ul>
<li><strong>Matplotlib</strong><br>用Python实现的类matlab的第三方库，用以绘制一些高质量的数学二维图形。</li>
<li><strong>Pandas</strong><br>用于数据分析、数据建模、数据可视化的第三方库。</li>
<li><strong>SciPy</strong><br>基于Python的matlab实现，旨在实现matlab的所有功能。</li>
<li><strong>NumPy</strong><br>基于Python的科学计算第三方库，提供了矩阵，线性代数，傅立叶变换等等的解决方案。</li>
</ul>
<h4 id="GUI"><a href="#GUI" class="headerlink" title="@ GUI"></a>@ GUI</h4><ul>
<li><strong>PyGtk</strong><br>基于Python的GUI程序开发GTK+库。</li>
<li><strong>PyQt</strong><br>用于Python的QT开发库。</li>
<li><strong>WxPython</strong><br>Python下的GUI编程框架，与MFC的架构相似。</li>
</ul>
<h4 id="其它"><a href="#其它" class="headerlink" title="@ 其它"></a>@ 其它</h4><ul>
<li><strong>BeautifulSoup</strong><br>基于Python的HTML/XML解析器，简单易用。</li>
<li><strong>gevent</strong><br>python的一个高性能并发框架,使用了epoll事件监听、协程等机制将异步调用封装为同步调用。</li>
<li><strong>PIL</strong><br>基于Python的图像处理库，功能强大，对图形文件的格式支持广泛。目前已无维护，另一个第三方库Pillow实现了对PIL库的支持和维护。</li>
<li><strong>PyGame</strong><br>基于Python的多媒体开发和游戏软件开发模块。</li>
<li><strong>Py2exe</strong><br>将python脚本转换为windows上可以独立运行的可执行程序。</li>
<li><strong>Requests</strong><br>适合于人类使用的HTTP库，封装了许多繁琐的HTTP功能，极大地简化了HTTP请求所需要的代码量。</li>
<li><strong>scikit-learn</strong><br>机器学习第三方库，实现许多知名的机器学习算法。</li>
<li><strong>TensorFlow</strong><br>Google开发维护的开源机器学习库。</li>
<li><strong>Keras</strong><br>基于TensorFlow，Theano与CNTK的高级神经网络API。</li>
<li><strong>SQLAlchemy</strong><br>关系型数据库的对象关系映射(ORM)工具</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu Terminal(2)]]></title>
      <url>/2018/01/25/Ubuntu-2/</url>
      <content type="html"><![CDATA[<h1 style="text-align:center">Linux for human beings(为了人类！！！)</h1>

<h2 id="Ubuntu终端命令"><a href="#Ubuntu终端命令" class="headerlink" title="# Ubuntu终端命令"></a># Ubuntu终端命令</h2><p>&emsp;&emsp;继上一回分解，我们学习了<code>ls</code>命令，那么今天我们来学习其他基础命令，大家坐好听我细细装逼…呸，细细道来。</p>
<blockquote>
<p>这里科普一下知识点，<br>例如:<br>&emsp;&emsp;<code>pwd</code>：代表显示当前目录<br>&emsp;&emsp;<strong>Tab</strong>键：可以在你打出相关字时自动为你填充完整。</p>
</blockquote>
<h3 id="cd-命令"><a href="#cd-命令" class="headerlink" title="@ cd 命令"></a>@ cd 命令</h3><p>&emsp;&emsp;<code>cd</code>乍一看，是不是觉得他和我们看的蓝光影碟（滑稽）有点像呢，hhh。然而并不是，这个<code>cd</code>命令是用于跳转目录的，我们现在来看看他的效果。店小二，上图！<br><img src="http://p02zvk8jf.bkt.clouddn.com/cd.png" alt="cd效果图"><br>&emsp;&emsp;是不是有点感觉了，有感觉就对了，没感觉的上一边蹲着去！<br><code>cd</code>命令可以用于相对路径和绝对路径，这得看具体情况。</p>
<blockquote>
<p>相对路径：表示从根目录开始查找，路径是唯一不变的。<br>&emsp;&emsp;例如：<code>cd /home/congstang/Desktop</code><br>绝对路径：表示在当前文件夹开始查找，路径不是唯一不变的。<br>&emsp;&emsp;例如：<code>cd Desktop</code>（当前目录为~，也就是/home/congtsang）</p>
</blockquote>
<h4 id="cd-当前路径"><a href="#cd-当前路径" class="headerlink" title="$ cd 当前路径"></a>$ cd 当前路径</h4><p>&emsp;&emsp;这个其实我是真的不想说的，太智障的命令了，那就是<code>cd .</code>这个命令，是跳转到当前路径，是不是觉得没啥用，但是我就是要说，因为可以凑字数。</p>
<h4 id="cd-返回上级"><a href="#cd-返回上级" class="headerlink" title="$ cd 返回上级"></a>$ cd 返回上级</h4><p>&emsp;&emsp;当我们要返回上一层路径（当前路径为/home/congtsang/Desktop）时，你们是不是想到了敲打路径来返回，像这样<code>cd /home/congtsang</code>，是不是觉得好麻烦并且效率一点都不高。hhhhh，那就对了，这不就轮到我上场表演了吗。<br>请看下图:<br><img src="http://p02zvk8jf.bkt.clouddn.com/cd2.png" alt="cd返回上级"><br>&emsp;&emsp;从图中，我们可以看见，通过<strong><code>cd ..</code></strong>我们可以简单方便的实现返回上级目录，如果要返回多层，只需要在<code>..</code>后面加个<code>/</code>，后再加<code>..</code>。栗子：<code>cd ../..</code>，以此类推。这不就实现返回上上层了吗。是不是觉得快多了，而且不需要考虑任何路径。哦哈哈哈哈，这个逼我装走了。</p>
<h4 id="cd-时光机"><a href="#cd-时光机" class="headerlink" title="$ cd 时光机"></a>$ cd 时光机</h4><p>&emsp;&emsp;在上面那个图中个，当我们在一个路径操作完一些东西的时候，要返回原来的路径时，是不是又要用<code>cd （路径）</code>来返回呢？这当然不是了，我们可以使用一个简便的命令，<code>cd -</code><br>&emsp;&emsp;<code>cd -</code>：回到原来的路径，也就是回到之前所在路径，<strong>但只能返回原来的路径</strong>，一直使用的话会在俩个路径下重复，你们想是不是啊，我知道你们不会想，就像看结果，heng，没有，快滚，自己去实践。</p>
<h3 id="touch-创建文件"><a href="#touch-创建文件" class="headerlink" title="@ touch 创建文件"></a>@ touch 创建文件</h3><p>&emsp;&emsp;当我们需要在一个路径下创建一个文件怎么办呢？当然啦，Ubuntu具有图形界面，右击新建就可以，但我们是学习他的命令，不然以上的东西都可以图形界面解决，那还要我干嘛呢？<br>&emsp;&emsp;这里，我们可以使用<code>touch</code>命令来创建一个文件。<br>栗子：<br><img src="http://p02zvk8jf.bkt.clouddn.com/touch.png" alt="touch创建文件"></p>
<h3 id="ls-罗列文件"><a href="#ls-罗列文件" class="headerlink" title="@ ls 罗列文件"></a>@ ls 罗列文件</h3><p>&emsp;&emsp;哎！CongTsang老师，这个在上一节不是讲过了吗？“（轻蔑的一笑）年轻人，猴急猴急的，我说的<code>ls</code>和原来的可是不一样了呀。” 我们不一样，不一样！<br>&emsp;&emsp;我们在上面用<code>touch</code>命令创建了这么多东西，但我们想要罗列怎么办呢，这不简单吗，使用<code>ls</code>命令啊，是是是。但我们想要罗列其中的几个怎么办？嗯？是不是语塞，留下了没技术的眼泪？来，让我来教你。<br>先上图：<br><img src="http://p02zvk8jf.bkt.clouddn.com/ls_fit.png" alt="ls罗列"></p>
<blockquote>
<p><code>*</code>：这个符号代表<strong>多个</strong>字符通配。<br> <code>?</code>：这个符号代表<strong>单个</strong>字符通配。</p>
</blockquote>
<pre><code>congtsang@ubuntu:~/Desktop$ ls
1.txt  2.txt  3.tmt  4.tst  5.py  6.cpp  7
</code></pre><p>&emsp;&emsp;其中<code>ls</code>和<code>ls *</code>是一样的功能，这里不详细说了。我们来看看其他的<br>&emsp;&emsp;<code>ls *.txt</code>：这个是罗列后缀为txt的所有文件。<br>&emsp;&emsp;<code>ls *.t?t</code>：这个是罗列后缀为t?t的所有文件。<br>&emsp;&emsp;<code>ls *.*</code>：这个是罗列具有后缀的所有文件，这里可以看到，没有后缀的<em>7</em>文件没有被罗列出来。</p>
<h4 id="ls-选择罗列"><a href="#ls-选择罗列" class="headerlink" title="$ ls 选择罗列"></a>$ ls 选择罗列</h4><p>&emsp;&emsp;当我们需要罗列tmt和txt文件而不想罗列tst这个后缀文件时，我们应该怎么办呢？这个时候我们就有了一个叫选择符号<code>[]</code>，这个符号代表从里面选择字符。<br>栗子：</p>
<pre><code>congtsang@ubuntu:~/Desktop$ ls
1.txt  2.txt  3.tmt  4.tst  5.py  6.cpp  7
congtsang@ubuntu:~/Desktop$ ls *.t[mx]t
1.txt  2.txt  3.tmt
</code></pre><hr>
<p>&emsp;&emsp;当我们选择罗列后缀或者名称中某个字符比较多的时候，例如：<code>.tat、.tbt、.tct、.tdt</code>这些后缀，那么是不是使用<code>[abcd]</code>就可以了，答案当然可以啦，但是要是从a到x呢，你是不是蒙蔽了？就想着在<code>[]</code>这里面把a到x字母全部写上？答案当然是啦。嘻嘻，其实有更简便的方法，那就是<strong><code>[a-z]</code></strong>。<br>栗子：<br><img src="http://p02zvk8jf.bkt.clouddn.com/ls%5Ba-f%5D.png" alt="ls[a-z]"></p>
<hr>
<p>&emsp;&emsp;当我们要选择一个带符号的文件（*a）怎么办呢？<code>ls *a</code>？你可以试试，结果肯定不行啦。学过转义字符应该知道<code>\</code>这个符号可以把一些特殊符号转化为无意义可以显示的符号。<br>栗子：</p>
<pre><code>congtsang@ubuntu:~/Desktop$ ls
10.tct  1a     2a     3a     4.tst  6.cpp  8.tat  *a
11.tdt  1.txt  2.txt  3.tmt  5.py   7      9.tbt  *a.txt
congtsang@ubuntu:~/Desktop$ ls *a
1a  2a  3a  *a
congtsang@ubuntu:~/Desktop$ ls \*a
*a
</code></pre><h3 id="Constructing-施工队施工中"><a href="#Constructing-施工队施工中" class="headerlink" title="#Constructing(施工队施工中)"></a>#Constructing(施工队施工中)</h3><p>请看下回分解</p>
]]></content>
      
        <categories>
            
            <category> Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Material Comment System]]></title>
      <url>/2018/01/14/Comment/</url>
      <content type="html"><![CDATA[<h2 style="text-align:center">如何装逼才能把别人哄的一愣一愣的</h2>

<h3 id="出场方式"><a href="#出场方式" class="headerlink" title="#出场方式"></a>#出场方式</h3><p>&emsp;&emsp;首先是我的色友<a href="https://taifua.com/" target="_blank" rel="noopener">@太傅</a>小朋友强烈要求并且对我使用淫威之术，让我在我的文章下面添加评论系统，奈何不了他的强势，那我就勉为其难的添加一个吧，哎~所以说有个优（la）秀（ji）的色友是多么的好！<br>&emsp;&emsp;我一开始不知道是用哪个评论系统好，所以想要征求一下他的意见，为啥要用征求呢？没办法他太优（la）秀（ji）了，向优（la）秀（ji）的大学生低头。然后他用的是<a href="https://valine.js.org/#/" target="_blank" rel="noopener">valine</a>这个系统（Valine 是一款基于LeanCloud的快速、简洁且高效的无后端评论系统。）为了满足他<strong>生理上</strong>以及<strong>心理上</strong>的需求，我<strong>一夜7次</strong>的加班加点干活！！</p>
<h3 id="装逼步骤"><a href="#装逼步骤" class="headerlink" title="#装逼步骤"></a>#装逼步骤</h3><p>&emsp;&emsp;一开始我都不知道怎么弄这个系统，看了那个文档也没什么用，加了一大群东西还是没用。<br>例如这样：</p>
<center><img src="http://p02zvk8jf.bkt.clouddn.com/invalid.png" alt="无效修改"></center><br>&emsp;&emsp;<code>hexo clean</code>、<code>hexo g</code>和<code>hexo d</code>之后还是没有任何效用，很无奈，他说他都看了半天才弄懂，哎，当时觉得就不想弄了，文档上面还一大堆教程，都没用。感觉天昏地暗，不管了，我先睡觉了。喂！你说好的一夜7次加班加点干活的呢？  “什么？这你都信！别这么想不开啊。”<br>&emsp;&emsp;然后我去升级了一下我这个Material的主题后，版本为1.5.2了，以前多少来着我也不记得了，反正我旧版本也有一个valine的选项，不知什么原因就GG了，还让我搞了大半天还弄不好，心累啊。<br>&emsp;&emsp;升级后，我发现评论系统多了一些可选项，觉得有戏，然后又添了一遍。升级文件里是没有配置文件<strong>_config.yml</strong>的，只有一个模板配置文件<strong>_config.template.yml</strong>,我通过这个模板文件把一些配置复制到配置文件里，实现了无缝升级，然后奇迹般地他有用了！！！，哇，赶紧向色友炫耀一波，hhhhh~~~顺便自己抢一抢沙发把。<br>例如这样：<br><center><img src="http://p02zvk8jf.bkt.clouddn.com/valid.png" alt="有效修改"></center><br><center><img src="http://p02zvk8jf.bkt.clouddn.com/valid1.png" alt="有效修改"></center>

<hr>
<center><strong>没用的话，强调三遍：升级你的主题！升级你的主题！升级你的主题！</strong></center>

<hr>
<h4 id="关于key和id"><a href="#关于key和id" class="headerlink" title="@关于key和id"></a>@关于key和id</h4><p>&emsp;&emsp;先去<a href="https://leancloud.cn/" target="_blank" rel="noopener">LeanCloud</a>注册一个账号，然后创建一个<strong>应用</strong>，默认就好了，然后进入应用的设置里，如下面这张萌萌的图</p>
<p><center><img src="http://p02zvk8jf.bkt.clouddn.com/leancloud_key.png" alt="leancloud"></center><br>&emsp;&emsp;把App ID和App Key复制一下，填入主题配置文件_config.yml里的相关valine选项的关键字id和key。其他的配置选项看你们自己个个性化吧。<br>&emsp;&emsp;我这个教程差不多就这样子了，更多的问题欢迎在下面留言哦，我回不回复看我的心情。就是这样，嘻嘻~</p>
]]></content>
      
        <categories>
            
            <category> Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[白夜行]]></title>
      <url>/2018/01/12/%E7%99%BD%E5%A4%9C%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h2 style="text-align:center">世上有两样东西不可直视，一是太阳，二是人心。</h2>

<center><img src="http://p02zvk8jf.bkt.clouddn.com/image/blog1.jpg" alt="白夜行封面"></center>

<h3 id="成就模式"><a href="#成就模式" class="headerlink" title="#成就模式"></a>#成就模式</h3><blockquote>
<p>《白夜行》是日本作家<a href="https://baike.baidu.com/item/%E4%B8%9C%E9%87%8E%E5%9C%AD%E5%90%BE/9506697?fr=aladdin" target="_blank" rel="noopener">东野圭吾</a>的长篇推理小说，也是其代表作。1997年1月至1999年1月连载于集英社《小説すばる》，单行本由集英社于1999年8月发行，日本销售量超过200万本。英文版译名《Journey Under the Midnight Sun》。<br>小说将无望却坚守的凄凉爱情和执著而缜密的冷静推理完美结合。2006年，小说被改编成同名电视连续剧，一举囊括第48届日剧学院赏四项大奖。</p>
</blockquote>
<h3 id="内容简介"><a href="#内容简介" class="headerlink" title="#内容简介"></a>#内容简介</h3><p>&emsp;&emsp;故事围绕着一对有着不同寻常情愫的小学生展开。1973年，大阪的一栋废弃建筑内发现了一具男尸，此后19年，嫌疑人之女<strong>唐泽雪穗</strong>与被害者之子<strong>桐原亮司</strong>走上截然不同的人生道路，一个跻身上流社会，一个却在底层游走，而他们身边的人，却接二连三地离奇死去，警察经过19年的艰苦追踪，终于使真相大白。</p>
<h3 id="小说背景"><a href="#小说背景" class="headerlink" title="#小说背景"></a>#小说背景</h3><p>&emsp;&emsp;小说以日本泡沫经济时期为背景，在文中多次出现“泡沫经济”一词。小说开始时的案发地是一座废弃的烂尾楼，这正让人联想起当时日本经济的衰落和萧条。泡沫经济的破灭，大批企业倒闭，致使失业率骤增，据社会学家统计，这一时期日本近1/3的人口是失业者，家庭背负巨额债务，经济从巅峰跌入谷底，挥金如土的日本人开始体会到金钱的重要性。为了生存、为了“安全感”，金钱成为凌驾于亲情、友情、爱情等人与人之间最宝贵情感之上的东西，人性在金钱的追逐中迷失，个人本位主义、社会无罪感等大行其道。当泡沫经济压得人喘不过气时，日本又相继发生了阪神大地震和沙林毒气杀人等重大自然灾害和社会事件。日本社会学家普遍认为，这从根本上改变了日本民众，特别是年轻一代的价值观和世界观。“日本安全神话”从此破灭，日本人普遍感到了对个人、亲友的安全上的威胁，社会秩序隐藏下的精神道德危机显现出来，“日本社会产生了影响范围更广、更深刻的‘信任危机’，并迅速波及各个领域”。雪穗和亮司爱情悲剧的源头是家庭的冷漠、社会的冷酷导致的人性扭曲，是雪穗和亮司儿时的不幸让“恨”的种子在心中滋长，结出“恶”的花朵并不断蔓延而不可遏制。<br>&emsp;&emsp;由此小说让我们反思究竟是<strong>人本身</strong>还是<strong>社会</strong>制造了这一场场的悲剧。</p>
<h3 id="作者"><a href="#作者" class="headerlink" title="#作者"></a>#作者</h3><p>&emsp;&emsp;东野圭吾（ひがしの けいご，Higashino Keigo），日本推理小说作家。代表作有《放学后》《秘密》《白夜行》《以眨眼干杯》《神探伽利略》《嫌疑人X的献身》《预知梦》《湖畔》等。<br>&emsp;&emsp;1958年2月4日出生于日本大阪。毕业于大阪府立大学电气工学专业，之后在汽车零件供应商日本电装担任生产技术工程师，并进行推理小说的创作。1985年，凭借《放学后》获得第31回江户川乱步奖，从此成为职业作家，开始专职写作。<br>&emsp;&emsp;1999年《秘密》获第52届日本推理作家协会奖，2006年《嫌疑人X的献身》获134届直木奖，东野圭吾从而达成了日本推理小说史上罕见的“三冠王”。</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="#目录"></a>#目录</h3><p>– 第一章<br>– 第二章<br>– 第三章<br>– 第四章<br>– 第五章<br>– 第六章<br>– 第七章<br>– 第八章<br>– 第九章<br>– 第十章<br>– 第十一章<br>– 第十二章<br>– 第十三章</p>
<blockquote>
<p>小说的每一章里还有许多的小节，因此本小说比较的厚实，希望读者可以静下心来仔细品味其中的乐趣。<br>反正我是陆陆续续看了一个多月，不是很勤快哈。但是越看越觉得有意思，后半期基本上天天看那么几节。</p>
</blockquote>
<h3 id="骨骼"><a href="#骨骼" class="headerlink" title="#骨骼"></a>#骨骼</h3><blockquote>
<p>我零碎的整理一些我脑海的思绪，可能没有一些逻辑，比较乱。<br>并且这也是我所理解的，很多细节我也不能一一分析，希望可以见谅。<br>部分文字参考自网络</p>
</blockquote>
<p>&emsp;&emsp;这本书可不是双十一买的哈，千万不要信上一篇《岛上书店》的邪，这本是双十二买的，hhhh~。没有了，这本是当《岛上书店》看完后，觉得要买一本书看看，毕竟在大学有一个梦想，努力看书（当然不是教科书哈，那个东西除了期末我是不会看的，(●’…’●)，开个玩笑哈，教科书还是得去看，不然你拿什么赚钱，是吧），这也是继我有女票时候约定吧，每个学期至少看一本小说，这当然不包括网络小说，把我大学前没看过课外书的时间补上。<br>&emsp;&emsp;好了，咱们先不聊我了，让我们来聊一聊这本悬疑又精彩的“巨作”（在我心中），小说一开始，发生在烂尾楼的案件，以及警方调查的结果上来看，我是没感觉的，前期我没觉得有意思，但是疑惑还是有的，因此是带着疑惑看下去的，所以前期也不是很积极的去看，一些东西没怎么记住，好吧我承认我没记，因为人物实在是太多了，只能通过反复看书，通过书上出场人物以及事件刺激记忆了。这小说最高明之处是文章的结构布局，作者的思维方式与常人正好相反，因而可以让整个故事行文不落俗套，如果有懂日文的童鞋，最好看看日版也就是原版吧，我是文盲只能看中文版啦。</p>
<blockquote>
<p>倘若你有兴趣读这本书的话，以下文字可能会剧透，请屏幕前的你慎重阅读，你读了，要是怀孕了，不要过来找我。</p>
</blockquote>
<p><img src="http://p02zvk8jf.bkt.clouddn.com/image/blog/Journey%20Under%20the%20Midnight%20Sun.png" alt="剧透高能预警"></p>
<p>&emsp;&emsp;文章中老警察<strong>笹垣润三</strong>是追踪这19年之久案件，也是小说的一条主线，带我们解开这时隔19年的谜团的主角之一，他把女主<strong>唐泽雪惠</strong>和男主<strong>桐原亮司</strong>形容为枪虾和虾虎鱼，他们是互利共生的关系，枪虾会挖一个洞，然后虾虎鱼会游来居住，枪虾会受到虾虎鱼的保护。雪惠靠这这个虾虎鱼慢慢的爬上社会的高层，而虾虎鱼亮司则还在社会底层游荡。亮司为了雪惠把一个一个阻挡在他们面前的障碍全部清理完，为了掩埋当年的秘密，他们在没有白天的黑夜里前行，这也是书名的由来。<br>&emsp;&emsp;其实小说的前期已经埋下了挺多的伏笔。烂尾楼那具男尸伤口是剪刀的伤口，在前期写到亮司和雪惠在图书馆剪纸的时候拿出那把锋利的剪刀，以及雪惠钥匙上的铃铛响动的时候，已经有意向是他们了，但是作者写作手法骨骼精奇，不让这些点在前期被我们读者怀疑，把注意力转移到一些怀疑对象上面。可能是我没怎么读过悬疑推理小说吧，觉得这手法很棒，也是一种欺骗读者的手段hhhh。<br>&emsp;&emsp;小说在后期，雪惠对自己在大阪新开的“R&amp;Y”店里的助手说了这么一段话：<strong>“我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。我从来就没有太阳，所以不怕失去。”</strong>,这个太阳就是亮司。</p>
<h4 id="爱情结局"><a href="#爱情结局" class="headerlink" title="@爱情结局"></a>@爱情结局</h4><p>&emsp;&emsp;在小说结尾，雪惠看见亮司因被警方追赶（此时已经得出亮司是凶手）用当年刺死父亲的同一把锋利的剪刀自杀时，头也不回的走上了楼梯，没有一丝犹豫，也没有一丝的伤心，依旧是美丽动人的样子，完全不在乎的样子。也许你们觉得她无情，一点都不爱亮司，是在利用他。其实不然，正是因为太爱了，才会这样做，不能暴露他们这些年在“黑夜”里所做的一切。雪穗的太阳熄灭了，她和亮司早已合为一体，亮司的死带走了雪穗的灵魂，让她的背影“犹如白色的影子”。她没有回头，不是不爱，而是太爱，为了死去的亮司她绝不能泄露心底的痛楚和悲伤，从此她只能在黑暗中孤独前行。<br>&emsp;&emsp;小说中亮司吐露了自己的心声：“<strong>只希望能手牵手在太阳下散步。</strong>”这也是他一辈子的夙愿，可惜实现不了了，为了这份沉重的爱情奉献了自己。<br>&emsp;&emsp;爱是一种奇妙的东西，它来源于人的意志，却又不以人的意志为转移。</p>
<h4 id="对社会的思考"><a href="#对社会的思考" class="headerlink" title="@对社会的思考"></a>@对社会的思考</h4><p>&emsp;&emsp;两位主人公那种始终向上的坚强斗志与不懈努力，其实是在不断向下的堕落中完成的。虽然他们都无比强悍地地扫清一个个障碍，成就自己的梦想，但是为此而身负的罪孽却早已万劫不复。如果结合小说中花费大量篇幅，透过人物的眼睛所描写的时代背景，那么小说对日本社会的隐喻便昭然若揭。小说中刻画的<strong>桐原弥生子</strong>，就是那个时代某些迷恋物质、不负责任的女性典型。<strong>唐泽雪穗</strong>刻意习得的优雅与高贵，也有一种畸形的虚荣心。<strong>桐原</strong>高中时期做起拉皮条的生意，也反映了当时许多日本中产家庭已婚妇女心灵空虚的状态。<strong>桐原</strong>从此时起开始介人计算机领域，靠盗版游戏发家，到后来参与的一系列“盗窃”的手段，侧面反映了计算机时代的逐步到来，以及银行电子系统的发展和完善。时代的发展紧紧地牵引着人物的命运，警官<strong>笹垣</strong>也在书中感叹自己老了，跟不上时代了，假如十九年前就有那么先进的技术，案件不至于拖到如今。</p>
<p>&emsp;&emsp;因此，我们在最后不禁会希望亮司没有死亡，他们可以在白天一起手牵手一起行走在光明下。可惜是这个社会造成这场悲剧，他们是社会经济萧条的受害者，值得可怜，值得怜悯，这一错再错，错到底的行为我们也就可以原谅了，但我们不能说他们无罪。</p>
<h3 id="灵魂"><a href="#灵魂" class="headerlink" title="#灵魂"></a>#灵魂</h3><blockquote>
<p>我的天空里没有太阳，总是黑夜，但并不暗，因为有东西代替了太阳。虽然没有太阳那么明亮，但对我来说已经足够。凭借着这份光，我便能把黑夜当成白天。我从来就没有太阳，所以不怕失去。</p>
<p>世上有两样东西不可直视，一是太阳，二是人心。</p>
<p>一天中，太阳会升起，同时还会落下。人生也一样，有白天和黑夜，只是不会像太阳那样，有定时的日出和日落。有些人一辈子都活在太阳的照耀下，也有些人不得不一直活在漆黑的深夜里。人害怕的，就是本来一直存在的太阳落下不再升起，也就是非常害怕原本照在身上的光芒消失。</p>
<p>因为我是幸福的，所以觉得随时死去也没有关系。</p>
<p>只希望能手牵手在太阳下散步。</p>
<p>现在的你，就是那时的我。</p>
<p>恶魔不会因为你是孩子就放过你，而且，恶魔还不止一个。杀死恶魔的人，必定也被恶魔的鲜血所污染，自己也变成了恶魔。</p>
<p>唯有那家图书馆，才是他们两人的心灵休憩之处。他们只是想保护自己的灵魂。结果，雪穂从不以真面目示人，亮司则至今仍在黑暗的通风管中徘徊。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 灵魂读者 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 灵性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu Terminal(1)]]></title>
      <url>/2018/01/08/Ubuntu-1/</url>
      <content type="html"><![CDATA[<p></p><h1 style="text-align:center">Linux for human beings(为了人类！！！)</h1><p></p>
<h3 id="前戏"><a href="#前戏" class="headerlink" title="#前戏"></a>#前戏</h3><p>&emsp;&emsp;我是使用虚拟机安装的Ubuntu，只要下个Ubuntu最新版镜像就好，然后使用VMware虚拟机装机就好了，教程如下。<br>&emsp;&emsp;Ubuntu ISO官方镜像网址：<a href="https://www.ubuntu.com/download/desktop" target="_blank" rel="noopener">点我呀~</a><br>&emsp;&emsp;下载前当然是需要我们用美刀支持他们，不过看个人，有钱捧个钱场，没钱就凑个热闹吧。这是可以免费下的，毕竟是开源系统。<br>&emsp;&emsp;VMware虚拟机软件下载地址：<a href="https://my.vmware.com/cn/web/vmware/free#desktop_end_user_computing/vmware_workstation_player/14_0" target="_blank" rel="noopener">点我呀~</a><br>&emsp;&emsp;这是一个VMware Workstation Player,也就是个人版，不需要购买的。已经可以满足我们的需求了。安装后就美滋滋的可以进行下一步了。</p>
<h3 id="安装Ubuntu"><a href="#安装Ubuntu" class="headerlink" title="#安装Ubuntu"></a>#安装Ubuntu</h3><p>&emsp;&emsp;打开VMware个人版，新建你的一个全新的虚拟机，就会弹出如下显示的选项，按照我这个教程大概就可以装成功了。要是有其他问题，emmmm，我也解决不了，再说你也留言不了，hhhhh~~~。咳咳咳，你还是可以邮箱以及其他方式通知我，理不理看我心情。就是这样，老子最酷！</p>
<h4 id="安装第一步"><a href="#安装第一步" class="headerlink" title="@安装第一步"></a>@安装第一步</h4><p><img src="http://p02zvk8jf.bkt.clouddn.com/install_1.png" alt="I&#39;m a picture"><br>&emsp;&emsp;当你看见这个东西的时候，我希望你不要激动，emmm你为啥要激动呢？啊~不要理我这个傻子。<br>&emsp;&emsp;选择<strong>经典</strong>安装方式就好了，其他的让虚拟机完成就ok。</p>
<h4 id="安装第二步"><a href="#安装第二步" class="headerlink" title="@安装第二步"></a>@安装第二步</h4><p><img src="http://p02zvk8jf.bkt.clouddn.com/install_2.png" alt="I&#39;m a picture"><br>&emsp;&emsp;选择完后进入这个画面，这就是比较关键的部分了，选择你的镜像文件iso，就是我在上面放出的<strong>贱人式</strong>求点链接中下载的桌面Ubuntu系统镜像文件。<br>&emsp;&emsp;选择完后软件会检测到这是什么系统，并且他就知道该怎么做了，有一种“放着我来的感觉”，但是你还是得继续操作这个磨人的小贱人。</p>
<h4 id="安装第三步"><a href="#安装第三步" class="headerlink" title="@安装第三步"></a>@安装第三步</h4><p><img src="http://p02zvk8jf.bkt.clouddn.com/install_3.png" alt="I&#39;m a picture"><br>&emsp;&emsp;到了这一步，我想你们就有些疑惑了，你们为啥有疑惑，我也不知道，我就说了，怎么着吧。酷！<br>&emsp;&emsp;咳咳咳，到这一步，我们就应该填写系统的一些资料了，这关系到安装好后你登陆到系统里面，就像Windows一样，需要用户名和密码才能登陆进桌面。什么？！！你家的Windows没有密码，开机直接进？好，你等一下。      “来人啊，把这个B拖出去踩蛋蛋五分钟。”<br>&emsp;&emsp;你就按照他的要求填就好，<strong>全名</strong>是可以大小写的，最好用<strong>英文</strong>好吧，这样bigger than bigger。嗯，<strong>用户名</strong>就是用户名，好像要小写，最好还是英文吧。<strong>密码</strong>这个不用我教了吧，实在不会就按照我的123456这个好吧。</p>
<h4 id="安装第四步"><a href="#安装第四步" class="headerlink" title="@安装第四步"></a>@安装第四步</h4><p><img src="http://p02zvk8jf.bkt.clouddn.com/install_4.png" alt="I&#39;m a picture"><br>&emsp;&emsp;下一步，我们就应该为这个系统分配空间了，这里默认20G的大小，你可以根据自己的盘容量来设定，其他保持默认就好了。什么？！你家硬盘2TB？！还是固态的？！！   好好好，恩恩恩。  “来人啊，把这个B拖出去枪毙五分钟。”</p>
<h4 id="安装第五步"><a href="#安装第五步" class="headerlink" title="@安装第五步"></a>@安装第五步</h4><p><img src="http://p02zvk8jf.bkt.clouddn.com/install_5.png" alt="I&#39;m a picture"><br>&emsp;&emsp;到这里我想不用我说了吧，好吧，我还是要说一下。这里到了一些相对关键的部分，就是配置你的这个Ubuntu系统的硬件，不在这里只是调一调内存和cpu内核数，数值越高性能越好，但是得看你的实体机吃不吃得消吧。这一步我就设成这样的虚拟硬件，不要问我为啥设成这么高，一个字：牛逼！</p>
<h4 id="Installation-Accomplish"><a href="#Installation-Accomplish" class="headerlink" title="@Installation Accomplish"></a>@Installation Accomplish</h4><p>&emsp;&emsp;小编，你为啥到这里标题用英文了捏？<br>&emsp;&emsp;哦哈哈哈哈，帅气啊，就是酷。其他不管。<br>&emsp;&emsp;下面就是我装好后调试了一段时间后的样子。还有许多东西等待我们去探索哦。先讲到这里了，我们下回讲解<br>&emsp;&emsp;起立，下课！<br><img src="http://p02zvk8jf.bkt.clouddn.com/Ubuntu_Desktop.png" alt="I&#39;m a picture"></p>
<h3 id="Ubuntu终端命令"><a href="#Ubuntu终端命令" class="headerlink" title="#Ubuntu终端命令"></a>#Ubuntu终端命令</h3><p><img src="http://p02zvk8jf.bkt.clouddn.com/Ubuntu_Terminal.png" alt="I&#39;m a picture"></p>
<h4 id="ls-命令"><a href="#ls-命令" class="headerlink" title="@ls 命令"></a>@ls 命令</h4><p>&emsp;&emsp;ls命令，大概是list的缩写。顾名思义，<strong>罗列</strong>的作用<br>&emsp;&emsp;<strong>ls</strong>命令：罗列当前文件夹的<strong>非隐藏</strong>文件（包括文件夹和文件）</p>
<pre><code class="Ubuntu">congtsang@ubuntu:~$ ls
Desktop    Downloads         Music     Public     Videos
Documents  examples.desktop  Pictures  Templates
</code></pre>
<p><img src="http://p02zvk8jf.bkt.clouddn.com/ls.png" alt="I&#39;m a picture"><br>&emsp;&emsp;文件夹和文件的显示颜色是不一样的，默认文件夹（蓝色），文件（白色）</p>
<hr>
<p>&emsp;&emsp;ls命令后面加一个空格后，可以有<strong>附加命令</strong>。</p>
<h5 id="ls-a"><a href="#ls-a" class="headerlink" title="$ ls -a"></a>$ ls -a</h5><p>栗子：</p>
<pre><code class="Ubuntu">congtsang@ubuntu:~$ ls -a
.              examples.desktop  .profile
..             .gconf            Public
.bash_history  .gitconfig        .sogouinput
.bash_logout   .gksu.lock        .ssh
.bashrc        .gnupg            .sudo_as_admin_successful
.byteexec      .ICEauthority     .sunpinyin
.cache         .lantern          Templates
.compiz        .local            .thunderbird
.config        .mozilla          Videos
.dbus          Music             .Xauthority
Desktop        .pam_environment  .xinputrc
.dmrc          Pictures          .xsession-errors
Documents      .pki              .xsession-errors.old
Downloads      .presage
</code></pre>
<p><img src="http://p02zvk8jf.bkt.clouddn.com/ls-a.png" alt="I&#39;m a picture"><br>&emsp;&emsp;想必可爱萌萌的读者在对比后可以知道<strong>-a</strong>的作用了吧。<br>&emsp;&emsp;<strong>ls -a</strong>的作用是罗列当前文件夹的<strong>所有</strong>东西（包括文件夹和文件）</p>
<hr>
<h5 id="ls-l"><a href="#ls-l" class="headerlink" title="$ ls -l"></a>$ ls -l</h5><p>&emsp;&emsp;<strong>ls -l</strong>的作用是以<strong>详细信息</strong>方式罗列当前文件夹的非隐藏东西（包括文件夹和文件）</p>
<pre><code class="Ubuntu">congtsang@ubuntu:~$ ls -l
总用量 44
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 16:45 Desktop
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Documents
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 13:07 Downloads
-rw-r--r-- 1 congtsang congtsang 8980 1月   5 12:17 examples.desktop
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Music
drwxr-xr-x 3 congtsang congtsang 4096 1月   5 16:45 Pictures
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Public
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Templates
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Videos
</code></pre>
<p><img src="http://p02zvk8jf.bkt.clouddn.com/ls-l.png" alt="I&#39;m a picture"><br>&emsp;&emsp;这里解释一下详细信息：<br>&emsp;&emsp;<em>drwxr-xr-x</em>：<br>&emsp;&emsp;&emsp;&emsp;最前面那个 d 代表的是类型<br>&emsp;&emsp;&emsp;&emsp;中间那三个 rwx 代表的是所有者（user）的权限<br>&emsp;&emsp;&emsp;&emsp;然后那三个 r-x 代表的是组群（group）的权限<br>&emsp;&emsp;&emsp;&emsp;最后那三个 r-x 代表的是其他人（other）的权限</p>
<blockquote>
<p>&emsp;&emsp;r 表示文件可以被读（read）<br>&emsp;&emsp;w 表示文件可以被写（write）<br>&emsp;&emsp;x 表示文件可以被执行（如果它是程序的话）<br>&emsp;&emsp;- 表示相应的权限还没有被授予</p>
</blockquote>
<p>&emsp;&emsp;在权限的后面有一个数字，代表 <strong>文件链接个数</strong>（我也不知道是啥，(●’….’●)）<br>&emsp;&emsp;紧接着后面的是<strong>root</strong>，代表<strong>文件的所有者</strong>，即文件拥有者。<br>&emsp;&emsp;在再后面的是<strong>group</strong>，代表<strong>文件所在的用户组</strong><br>&emsp;&emsp;接着是<strong>文件大小</strong>（默认以kb显示）<br>&emsp;&emsp;后面的我就不解释了吧，看不懂回家种田吧。</p>
<hr>
<h5 id="ls-h"><a href="#ls-h" class="headerlink" title="$ ls -h"></a>$ ls -h</h5><pre><code class="Ubuntu">congtsang@ubuntu:~$ ls
Desktop    Downloads         Music     Public     Videos
Documents  examples.desktop  Pictures  Templates
congtsang@ubuntu:~$ ls -h
Desktop    Downloads         Music     Public     Videos
Documents  examples.desktop  Pictures  Templates
</code></pre>
<p><img src="http://p02zvk8jf.bkt.clouddn.com/ls,ls-h.png" alt="I&#39;m a picture"><br>&emsp;&emsp;是不是发现这俩命令没啥区别，hhhhh~<br>&emsp;&emsp;那你看看下面这个有没有区别，找不同。</p>
<pre><code class="Ubuntu">congtsang@ubuntu:~$ ls -l
总用量 44
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 16:45 Desktop
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Documents
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 13:07 Downloads
-rw-r--r-- 1 congtsang congtsang 8980 1月   5 12:17 examples.desktop
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Music
drwxr-xr-x 3 congtsang congtsang 4096 1月   5 16:45 Pictures
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Public
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Templates
drwxr-xr-x 2 congtsang congtsang 4096 1月   5 12:34 Videos
congtsang@ubuntu:~$ ls -l -h
总用量 44K
drwxr-xr-x 2 congtsang congtsang 4.0K 1月   5 16:45 Desktop
drwxr-xr-x 2 congtsang congtsang 4.0K 1月   5 12:34 Documents
drwxr-xr-x 2 congtsang congtsang 4.0K 1月   5 13:07 Downloads
-rw-r--r-- 1 congtsang congtsang 8.8K 1月   5 12:17 examples.desktop
drwxr-xr-x 2 congtsang congtsang 4.0K 1月   5 12:34 Music
drwxr-xr-x 3 congtsang congtsang 4.0K 1月   5 16:45 Pictures
drwxr-xr-x 2 congtsang congtsang 4.0K 1月   5 12:34 Public
drwxr-xr-x 2 congtsang congtsang 4.0K 1月   5 12:34 Templates
drwxr-xr-x 2 congtsang congtsang 4.0K 1月   5 12:34 Videos
</code></pre>
<p><img src="http://p02zvk8jf.bkt.clouddn.com/ls-l,ls-lh.png" alt="I&#39;m a picture"><br>&emsp;&emsp;现在看起来是不是有些懂了<strong>-h</strong>的作用了？<br>&emsp;&emsp;<strong>ls -h</strong>是要配合其他附加命令使用，作用是以<strong>合适的单位</strong>展示文件大小<br>&emsp;&emsp;上面的命令是可以叠加的，<strong>ls -alh</strong>这样就加了三个附加命令。<br><img src="http://p02zvk8jf.bkt.clouddn.com/ls-alh.png" alt="I&#39;m a picture"></p>
<hr>
<h3 id="Constructing-施工队施工中"><a href="#Constructing-施工队施工中" class="headerlink" title="#Constructing(施工队施工中)"></a>#Constructing(施工队施工中)</h3><p>请看下回分解</p>
]]></content>
      
        <categories>
            
            <category> Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux]]></title>
      <url>/2018/01/06/Linux/</url>
      <content type="html"><![CDATA[<p></p><h3 style="text-align:center">Unix是一切系统的鼻祖，一切智能的开始，代表了一个时代的开端。</h3><br>Linux是Unix发展而来的克隆版本，并且开源，但是从Unix到Linux的期间发生了许多的故事。<br>如果你们有酒，那么就听我细细说(bian)道(zao)。<p></p>
<h3 id="发展史"><a href="#发展史" class="headerlink" title="#发展史"></a>#发展史</h3><blockquote>
<p>Unix -&gt; GNU -&gt; BSD -&gt; Minix -&gt; Linux<br>(The Article content adapted from the network!)</p>
</blockquote>
<h4 id="Unix"><a href="#Unix" class="headerlink" title="@Unix"></a>@Unix</h4><p>&emsp;&emsp;Unix是由KenThompson、Dennis Ritchie和Douglas McIlroy于1969年在AT&amp;T的<a href="https://baike.baidu.com/item/%E8%B4%9D%E5%B0%94%E5%AE%9E%E9%AA%8C%E5%AE%A4" target="_blank" rel="noopener">贝尔实验室</a>开发。<br>&emsp;&emsp;当时因为计算机很庞大昂贵，不是一般人可以用得起，因而每个软件或者说程序只能运行在唯一的机器上，不可以移植，维护的代价很高。语言也是底层基础的，直接控制机器。所以就想出了一个办法，利用一组软件来直接控制硬件，而在这组软件上实现功能也就是在这组软件上运行应用程序。因而得出了Unix操作系统。操作系统的诞生具有划时代的意义，它使得应用程序可以在任何机器上运行，移植很方便，不需要理会硬件问题，把每个机器的硬件给忽略，提供一个统一的开发环境，这对发展计算机来说具有重大意义。</p>
<h4 id="Minix"><a href="#Minix" class="headerlink" title="@Minix"></a>@Minix</h4><p>&emsp;&emsp;Minix是一种基于微内核架构的类Unix计算机操作系统，由Andrew S. Tanenbaum发明。Minix最初发布于1987年，开放全部源代码给大学教学和研究工作。2000年重新改为BSD授权，成为自由和开放源码软件。<br>&emsp;&emsp;因为AT&amp;T的政策改变，在Version 7 Unix推出之后，发布新的使用条款，将Unix源代码私有化，在大学中不再能使用Unix源代码。教授为了能在课堂上教授学生操作系统运作的实务细节，决定在不使用任何AT&amp;T的源代码前提下，自行开发与Unix兼容的操作系统，以避免版权上的争议。他以小型Unix（mini-Unix）之意，将它称为Minix。这对于闭源的后的Unix形势来说是另一个开端，并且迅速发展。<br>&emsp;&emsp;由于Minix是教授一人所写，所以存在一些漏洞。这时候有使用者发现漏洞存在，想着去下载一些补丁或者自己写一些补丁来修补这些漏洞，修补之后发现效果不错，然后就建议教授利用这些补丁完善下Minix，结果呢，教授比较固执，意思是说：为了维持Minix的纯洁性，不需要任何外来代码。也就是说，根本不打算做商业发行，所以Minux保持了其最原始的风范。</p>
<h4 id="Linux"><a href="#Linux" class="headerlink" title="@Linux"></a>@Linux</h4><p>&emsp;&emsp;在那个时期(上个世纪80年代)，DOS系统比较流行。芬兰赫尔辛基大学有个叫<a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9" target="_blank" rel="noopener">Linus Torvalds</a>的学生做了件不寻常的事情。当时他实验室正好有一台闲置的386的计算机，由于并不喜欢自己电脑上的DOS系统，所以就想：既然Minix这么棒、这么稳定，那我何不将它移植到个人计算机 （好在由于<a href="https://baike.baidu.com/item/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E9%A9%AC%E4%BF%AE%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC/2122303?fr=aladdin" target="_blank" rel="noopener">Stallman</a>提倡的Open Source理念，他得以接触到一些Source Code，而经由这样的一个想法，他就很有心的读取了Unix核心，并且去除较为繁复的核心程序，将它改写成可以适用于一般个人计算机的x86系统上面）。<br>&emsp;&emsp;在设计哲学上，Linux则和Minix大相迳庭。Minix在内核设计上采用微内核的原则，但Linux则和原始的Unix相同都采用宏内核的概念。(其实我这是参考网络，我也不懂(●’……’●))</p>
<h3 id="Linux发行版"><a href="#Linux发行版" class="headerlink" title="#Linux发行版"></a>#Linux发行版</h3><h4 id="Fedora-Core"><a href="#Fedora-Core" class="headerlink" title="@Fedora Core"></a>@Fedora Core</h4><p>&emsp;&emsp;<a href="https://baike.baidu.com/item/Fedora Core" target="_blank" rel="noopener">Fedora Core</a>（自第七版直接更名为Fedora）是众多 Linux 发行版之一。它是一套从Red Hat发展出来的免费Linux系统。Fedora Core的前身就是Red Hat Linux。Fedora是一个开放的、创新的、前瞻性的操作系统和平台，基于Linux。它允许任何人自由地使用、修改和重发布，无论现在还是将来。</p>
<h4 id="Debian"><a href="#Debian" class="headerlink" title="@Debian"></a>@Debian</h4><p>&emsp;&emsp;Debian主要通过基于Web的论坛和邮件列表来提供技术支持。作为服务器平台，Debian提供一个稳定的环境。为了保证它的稳定性，开发者不会在其中随意添加新技术，而是通过多次测试之后才选定合适的技术加入。当前最新正式版本是Debian 6，采用的内核是Linux 2.6.32。Debian 6 第一次 包含了一个100%开源的Linux内核，这个内核中不再包含任何闭源的硬件驱动。所有的闭源软件都被隔离成单独的软件包，放到Debian软件源的 “non-free” 部分。由此，Debian用户便可以自由地选择是使用一个完全开源的系统还是添加一些闭源驱动。</p>
<h4 id="Mandrake"><a href="#Mandrake" class="headerlink" title="@Mandrake"></a>@Mandrake</h4><p>&emsp;&emsp;Mandrake主要通过邮件列表和Mandrak 自己的Web论坛提供技术支持。Mandrak对桌面用户来说是一个非常不错的选择，它还可作为一款优秀的服务器系统，尤其适合Linux新手使用。它使用最新版本的内核，拥有许多用户需要在Linux服务器环境中使用的软件——数据库和Web服务器。<br>&emsp;&emsp;Mandrak没有重大的软件缺陷，只是它更加关注桌面市场，较少关注服务器市场。</p>
<h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="@Ubuntu"></a>@Ubuntu</h4><p>&emsp;&emsp;<a href="https://baike.baidu.com/item/Ubuntu" target="_blank" rel="noopener">Ubuntu</a>是一个以桌面应用为主的Linux操作系统，其名称来自非洲南部祖鲁语或豪萨语的“ubuntu”一词（译为吾帮托或乌班图），意思是“人性”、“我的存在是因为大家的存在”，是非洲传统的一种价值观，类似华人社会的“仁爱”思想。Ubuntu基于Debian发行版和unity桌面环境，与Debian的不同在于它每6个月会发布一个新版本。Ubuntu的目标在于为一般用户提供一个最新的、同时又相当稳定的主要由自由软件构建而成的操作系统。Ubuntu具有庞大的社区力量，用户可以方便地从社区获得帮助。</p>
<h4 id="Red-Hat"><a href="#Red-Hat" class="headerlink" title="@Red Hat"></a>@Red Hat</h4><p>&emsp;&emsp;<a href="https://baike.baidu.com/item/Red Hat" target="_blank" rel="noopener">Red Hat</a>是公共环境中表现上佳的服务器。它拥有自己的公司，能向用户提供一套完整的服务，这使得它特别适合在公共网络中使用。这个版本的Linux也使用最新的内核，还拥有大多数人都需要使用的主体软件包。<br>&emsp;&emsp;Red Hat Linux的安装过程也十分简单明了。它的图形安装过程提供简易设置服务器的全部信息。磁盘分区过程可以自动完成，还可以选择GUI工具完成，即使对于 Linux新手来说这些都非常简单。选择软件包的过程也与其他版本类似；用户可以选择软件包种类或特殊的软件包。系统运行起来后，用户可以从Web站点和Red Hat那里得到充分的技术支持。我发现Red Hat是一个符合大众需求的最优版本。在服务器和桌面系统中它都工作得很好。Red Hat的唯一缺陷是带有一些不标准的内核补丁，这使得它难于按用户的需求进行定制。 </p>
<h4 id="SuSE"><a href="#SuSE" class="headerlink" title="@SuSE"></a>@SuSE</h4><p>&emsp;&emsp;基于2.4.10内核的<a href="https://baike.baidu.com/item/SUSE/60409?fr=aladdin" target="_blank" rel="noopener">SuSE</a> 7.3，在原有版本的基础上提高了易用性。安装过程通过GUI完成，磁盘分区过程也非常简单，但它没有为用户提供更多的控制和选择。<br>&emsp;&emsp;在SuSE 操作系统下，可以非常方便地访问Windows磁盘，这使得两种平台之间的切换，以及使用双系统启动变得更容易。SuSE的硬件检测非常优秀，该版本在服务器和工作站上都用得很好。<br>&emsp;&emsp;SuSE拥有界面友好的安装过程，还有图形管理工具，可方便地访问Windows磁盘，对于终端用户和管理员来说使用它同样方便，这使它成为了一个强大的服务器平台。</p>
<h4 id="Linux-Mint"><a href="#Linux-Mint" class="headerlink" title="@Linux Mint"></a>@Linux Mint</h4><p>&emsp;&emsp;<a href="https://baike.baidu.com/item/Linux Mint" target="_blank" rel="noopener">Linux Mint</a>是一份基于Ubuntu的发行版，其目标是提供一种更完整的即刻可用体验，这包括提供浏览器插件、多媒体编解码器、对DVD播放的支持、Java和其他组件。它与Ubuntu软件仓库兼容。Linux Mint 是一个为pc和X86电脑设计的操作系统。</p>
<h4 id="Gentoo"><a href="#Gentoo" class="headerlink" title="@Gentoo"></a>@Gentoo</h4><p>&emsp;&emsp;<a href="https://baike.baidu.com/item/Gentoo" target="_blank" rel="noopener">Gentoo</a>是Linux世界最年轻的发行版本，正因为年轻，所以能吸取在她之前的所有发行版本的优点。Gentoo最初由Daniel Robbins（FreeBSD的开发者之一）创建，首个稳定版本发布于2002年。由于开发者对FreeBSD的熟识，所以Gentoo拥有媲美FreeBSD的广受美誉的ports系统 ——Portage包管理系统。</p>
<h4 id="centos"><a href="#centos" class="headerlink" title="@centos"></a>@centos</h4><p>&emsp;&emsp;<a href="https://baike.baidu.com/item/CentOS" target="_blank" rel="noopener">CentOS</a>（Community ENTerprise Operating System）是Linux发行版之一，它是来自于Red Hat Enterprise Linux依照开放源代码规定释出的源代码所编译而成。由于出自同样的源代码，因此有些要求高度稳定性的服务器以CentOS替代商业版的Red Hat Enterprise Linux使用。两者的不同，在于CentOS并不包含封闭源代码软件,CentOS 是一个基于Red Hat Linux 提供的可自由使用源代码的企业级Linux发行版本。</p>
<h3 id="常用发行版"><a href="#常用发行版" class="headerlink" title="#常用发行版"></a>#常用发行版</h3><p>&emsp;常用的Linux发行版有<strong>Ubuntu</strong>、<strong>SuSE</strong>、<strong>centos</strong>、<strong>Red Hat</strong>。</p>
<ul>
<li>Red Hat是专门用于网络方面的系统，配有一套网络开发的工具，比较方便。</li>
<li>centos是专门用于服务器方面的系统，市面上的服务器大部分都是这个系统，配有一整套服务器软件。</li>
<li>Ubuntu是具有图形友好界面的针对普通用户发行的系统，他适用于一般用户在里面学习教学。</li>
<li>SuSE是用于windows和linux双系统的交互作用，硬件检测的系统。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[岛上书店]]></title>
      <url>/2017/11/29/%E5%B2%9B%E4%B8%8A%E4%B9%A6%E5%BA%97/</url>
      <content type="html"><![CDATA[<h1 style="text-align:center">没有谁是一座孤岛</h1>

<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><blockquote>
<p>《岛上书店》是2015年江苏凤凰文艺出版社出版图书，作者（美）加布瑞埃拉·泽文。这是一本关于全世界所有书的书，写给全世界所有真正爱书的人。<br>《岛上书店》是一本现象级全球畅销书。2014年4月1日，《岛上书店》精装版在美国上市，立刻以一路破纪录的姿态，成为了2014年的全球出版界黑马。短短一年内风行畅销美、英、德、意大等30国，创下了出版史上全球化最快的畅销纪录。<br>————内容摘自《<a href="https://baike.baidu.com/item/%E5%B2%9B%E4%B8%8A%E4%B9%A6%E5%BA%97/17299603?fr=aladdin" target="_blank" rel="noopener">百度百科</a>》</p>
</blockquote>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>岛上书店是间维多利亚风格的小屋，门廊上挂着褪色的招牌，上面写着：<strong>没有谁是一座孤岛，每本书都是一个世界。</strong><br>A．J．费克里，人近中年，在一座与世隔绝的小岛上，经营一家书店。<br>命运从未眷顾过他，爱妻去世，书店危机，就连唯一值钱的宝贝也遭窃。他的人生陷入僵局，他的内心沦为荒岛。<br>就在此时，一个神秘的婴儿出现在书店中，意外地拯救了陷于孤独绝境中的A．J．，成为了连接他和小姨子伊斯梅、警长兰比亚斯、出版社女业务员阿米莉娅之间的纽带，为他的生活带来了转机。<br>小岛上的几个生命紧紧相依，走出了人生的困境，而所有对书和生活的热爱都周而复始，愈加汹涌。</p>
<h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><p>加布瑞埃拉·泽文(Gabrielle Zevin，1977—)<br>美国作家、电影剧本编剧。年轻并极富魅力，深爱阅读与创作，为《纽约时报书评》撰稿，现居洛杉矶。<br>毕业于哈佛大学英美文学系，已经出版了八本小说，作品被翻译成二十多种语言。14岁时，她写了一封关于“枪与玫瑰乐团”的信函投给当地报社，措辞激烈，意外获得该报的乐评人一职，迈出了成为作家的第一步。一直以来，她对书、书店以及爱书人的未来，充满见解。她的第八本小说《岛上书店》在2014年以史无前例的最高票数，获选美国独立书商选书第一名。</p>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>第一部<br>《待宰的羔羊》 / 3<br>《像里兹饭店那样大的钻石》 / 27<br>《咆哮营的幸运儿》 / 41<br>《世界的感觉》 / 81<br>《好人难寻》 / 89<br>《卡拉维拉县驰名的跳蛙》 / 135<br>《穿夏裙的女孩》 / 167<br>第二部<br>《与父亲的对话》 / 183<br>《逮香蕉鱼的最佳日子》 / 197<br>《泄密的心》 / 209<br>《铁头》 / 223<br>《当我们谈论爱情时我们在谈论什么》 / 249<br>《书店老板》 / 257</p>
<h2 id="骨骼"><a href="#骨骼" class="headerlink" title="骨骼"></a>骨骼</h2><blockquote>
<p>来吧，亲爱的，<br>且让我们来相爱，<br>趁你我<br>尚在人世<br>——<a href="https://baike.baidu.com/item/%E9%B2%81%E7%B1%B3/2018310?fr=aladdin" target="_blank" rel="noopener">鲁米</a></p>
</blockquote>
<pre><code>文章内容有些许摘自《知乎》  — —如何评价小说《岛上书店》
</code></pre><p>&emsp;&emsp;当初买这本书是在双十一逛某宝的时候看到的，因为没啥想买的，又不想白白浪费这个打折狂欢的机会对吧。虽然只减了一块钱，但还是挺赚的嘛，一块钱等于不要钱，免费就买了。<br>&emsp;&emsp;说实话，这本书给我的感觉就是很温情、正能量、温馨，人在绝境边缘，接近崩坏的时候，独自在人生的一个小岛上，与外界没有任何联系，这时候一个转折点（也就是<strong>玛雅</strong>（弃婴），或者说是<strong>书</strong>），建立起了与外界的沟通，人与人之间无声的爱、关心、思念、牵挂等种种情感也就跃然纸上（反正表达一种有灵性的感觉，我懂就好）。就像荒芜的沙漠在情感的甘露下转瞬之间成了葱郁的绿洲。人重新有了希望，<strong>为了一个人或者一些人而活下去，这或许就是人生吧。</strong><br>&emsp;&emsp;这本书可以说是<strong>小说中的小说</strong>，为什么这么说呢，他的每一个章节标题都是一本书名的引用，是A·J·Fikry（男主）给玛雅推荐的书，其后的书评包含了A·J·Fikry对玛雅的希望与寄托，字字入心（好吧，我承认这个词是我编的）。这种写作方法还是挺新颖的说实话，这也跟小说的构造有关，因为两岁零一个月大的玛雅是走入绝望的女人留给他的唯一珍贵遗物吧，并希望他能把他培养成一个爱读书，让她在一个有书本的地方长大。因此作为岛上唯一一座书店的老板A·J·F承担了这个任务，也打开了A·J·F的心扉，他的人生也开始有了新目标。<br>&emsp;&emsp;A·J·F（男主）是除了自己之外极度自私的人，对世界的付出的前提是自己先获得爱。而他却在抚养玛雅的过程中，逐渐打开了自己心扉，并且在面对和阿米莉亚的感情时，选择了主动去爱（尽管追求对方的手法十分笨拙又呆萌）。<br>&emsp;&emsp;阿米莉娅（女主）是本书的恋爱观的传递者。恋爱的偏执狂，约了很多次会，但是最终没相中一个。可能和生活中很多看起来谈过很多恋爱的人一样，他们并不是不看重爱情，而是太看重爱情，所以才选择了残忍的淘汰制。她要找的是一个真正理解她，能够与她产生精神共鸣的知心人。阿米莉娅经历了爱情的多次失败后，遇见A·J·F就觉得他很符合。阿米莉娅的爱是成熟的，她包容A·J·F内心里的孩子气，没有揭穿他的自以为是还有傲慢好辩。所以呢，得出一条：<strong>真正的爱情就不是两个完美的人互相欣赏，而是我已经知道你不完美，可是我依然爱你。</strong><br>&emsp;&emsp;伊斯梅：中学教师，A·J·F亡妻的姐姐。喜欢表面光鲜的人，思想比较浅薄，前半部最悲惨的角色，丈夫出轨爱偷情，自己流产了七次，偷走《帖木儿》（一本埃德加·爱伦·坡的诗集，价值不菲）来打发丈夫出轨对象玛雅的母亲，目睹A·J·F再婚受到打击与丈夫在车上争执导致车祸丈夫去世，与追查《帖木儿》下落的小岛警官结合，后归还《帖木儿》拯救或者说延长了A·J·F心灵里的生命。<br>&emsp;&emsp;以上只列出了部分的关键人物，因为博主学识浅薄，只能通过借鉴别人的表达来传递我自己的真实感受。具体的内容还请屏幕前的读者仔细品味原著，毕竟任何的解释都没有原著作来的真切，这里也还是说说我自己的想法与感动。<br>&emsp;&emsp;虽然文章以A·J·F的脑癌病死结尾，但他却获得了重生和救赎。一个从亡妻，珍藏的《帖木儿》的失去，厌世，孤独，通过玛雅和书的救赎，转而变成为了慈父，温情，热爱生活，积极的A·J·F。在结尾的书评中他对玛雅的寄托是<strong>跟人沟通，我亲爱的小书呆子，只有沟通。</strong>这也是A·J·F告诉我们的东西，唯有沟通才能建立起与外界的桥梁，才会有爱，有故事。<br>&emsp;&emsp;唯有爱，可以拯救自己！唯书与爱，不可辜负！<br>&emsp;&emsp;作者言：一个人无法自成孤岛 ，要么至少 ，一个人无法自成最理想的孤岛 。<br>&emsp;&emsp;作者写这本书的愿望是让我们读书，细细品味其中的乐趣与感情，并且多与灵魂沟通。每本书，是一个世界；而每个人，都是一本书。</p>
<h2 id="灵魂"><a href="#灵魂" class="headerlink" title="灵魂"></a>灵魂</h2><blockquote>
<p>一个人无法自成孤岛，那么至少，一个人无法自成最理想的孤岛。</p>
<p>因为从心底害怕自己不值得被爱 ，我们独来独往 ， 然而就是因为独来独往 ，才让我们以为自己不值得被爱 。有一天 ，你不知道是什么时候 ，你会驱车上路 。有一天 ，你不知道是什么时候 ，你会遇到他 （她 ） 。你会被爱 ，因为你今生第一次真正不再孤单 。你会选择不再孤单下去 。 ”</p>
<p>我懂你的意思。他们看来不是闭着眼结婚的。A.J知道阿米莉亚不是十全十美，阿米莉亚也知道AJ不是十全十美，他们知道世界上没有十全十美这种事。</p>
<p>独自生活的难处，在于不管弄出什么样的烂摊子，都不得不自己清理。不，独自生活的真正难处在于没人在乎你是否心烦意乱。</p>
<p>关于政治、上帝和爱，人们都讲些无聊的谎话。想要了解一个人，你只需要问一个问题:“你最喜欢哪本书？”</p>
<p>她吻遍他那个有毛病的脑袋上的每个地方。 “我以前喜欢这个头脑，我现在也喜欢这个头脑！这是个非常好的头脑。” “我也喜欢。”他说。 护工来把他推走。 “我爱你。”她听天由命地耸耸肩， “我想留给你什么更聪明的话，但是我只知道那一句。”</p>
<p>长得漂亮不是追求人的好理由。</p>
<p>“我们不是我们所收集的、得到的、所读的东西，只要我们还活着，我们就是爱，我们所爱的事物，我们所爱的人。所有这些，我认为真的会存活下去。”</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 灵魂读者 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 灵性 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Learning MarkDown]]></title>
      <url>/2017/11/23/tests/</url>
      <content type="html"><![CDATA[<h1 style="text-align:center">Markdown 的目标是实现「易读易写」</h1>

<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote>
<p>Markdown 语法的目标是：成为一种适用于网络的书写语言。<br>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。</p>
</blockquote>
<h1 id="小试MarkDown"><a href="#小试MarkDown" class="headerlink" title="小试MarkDown"></a>小试MarkDown</h1><p>这里只是一些日常能用到的，这教程比纸长，就不多说一些使用率低的东西了。</p>
<hr>
<h3 id="标题的使用"><a href="#标题的使用" class="headerlink" title="#标题的使用"></a>#标题的使用</h3><p>在这里呢，<code>#</code> 号后面 <strong>空格</strong> ！！</p>
<blockquote>
<p>```markdown<br> # 这是一级标题<br> ## 这是二级标题<br> ### 这是三级标题<br> #### 这是四级标题<br> ##### 这是五级标题<br> ##### 这是六级标题<br>```</p>
</blockquote>
<p><strong> - 实例：</strong></p>
<p><img src="/img/Titile.jpg" alt="我是图片" title="我是图片"></p>
<hr>
<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="#代码高亮"></a>#代码高亮</h3><ul>
<li>如下格式写你就会得到下下的实例，代码的高亮主题是与你主题设置有关，我设置了一个比较<strong>内(sao)敛(qi)</strong>的。<br><strong>```</strong> - 这个“点点点”是在Tab键上面那个键，并且用英文输入，这点应该不用强调三遍。<br>好，那么。。。。。<strong>Tab键上面那个键，并且用英文输入</strong>；<strong>Tab键上面那个键，并且用英文输入</strong>。就强调两遍。</li>
</ul>
<blockquote>
<p>```cpp</p>
<p>#include <stdio.h><br>void main()<br>{<br>    double world;<br>    unsigned letter;<br>    short stay;<br>    long memories;<br>    printf(“I miss you.n”);<br>}<br>``` </stdio.h></p>
</blockquote>
<p><strong> - 实例：</strong></p>
<pre><code class="cpp">#include &lt;stdio.h&gt;
void main()
{ 
    double world;
    unsigned letter;
    short stay;
    long memories;
    printf(&quot;I miss you.n&quot;);
}
</code></pre>
<ul>
<li>上面的是区块代码，要实现行内代码则需要打上`我是代码` </li>
</ul>
<p><strong> - 实例：</strong><br><code>我是代码</code></p>
<hr>
<h3 id="分割线"><a href="#分割线" class="headerlink" title="#分割线"></a>#分割线</h3><p>要屏蔽楼上的毒舌以及楼下的戳菊(手动打码)，这个功能绝对是极品需要，好嘛！</p>
<p>格式如下图，需要注意的是三个<strong>相同</strong>符号( - , * )相同，并且行内不能有其他符号文字，空格可以夹杂。</p>
<blockquote>
<pre><code>---
- - -
***
* * *
</code></pre></blockquote>
<p><strong>- 实例:</strong></p>
<hr>
<hr>
<hr>
<hr>
<h3 id="序号"><a href="#序号" class="headerlink" title="#序号"></a>#序号</h3><p>有序序号就是1. 2. 3. 之类的<br>无序序号就是 。。。。 这样的<br>需要说明的：<br><strong>有序</strong>序号第一个写1. 后面随便写序号。完全o**k。<br>记得符号后面加个空格，反正不会怀孕是吧。</p>
<blockquote>
<p>- 无序序号1<br>- 无序序号2<br>- 无序序号3<br>1.无序序号1<br>2.无序序号2<br>4.无序序号3</p>
</blockquote>
<p><strong> - 实例：</strong></p>
<ul>
<li>无序序号1</li>
<li>无序序号2</li>
<li>无序序号3</li>
</ul>
<ol>
<li>无序序号1</li>
<li>无序序号2</li>
<li>无序序号3</li>
</ol>
<hr>
<h3 id="链接图片"><a href="#链接图片" class="headerlink" title="#链接图片"></a>#链接图片</h3><p>没有小(huang)图片的网站怎么能称得上是网(huang)站(wang)呢</p>
<p>格式如下：</p>
<pre><code class="markdown">![Alt text](/path/to/img.jpg)
![Alt text](/path/to/img.jpg &quot;Optional title&quot;)
</code></pre>
<ul>
<li>Alt text 这个是图片加载不出来是显示的</li>
<li>“Optional title” 这个是鼠标移到图片显示出的名字</li>
<li>路径我就不说了。emmm，哎还是说一下吧，可以是网址，可以使本地。</li>
</ul>
<p><strong> - 实例：</strong></p>
<p><img src="http://img.itlun.cn/uploads/allimg/160610/1-1606101502430-L.jpg" alt="没图显示的文字" title="光标显示出的文字"></p>
]]></content>
      
        <categories>
            
            <category> Learning </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MarkDown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/11/21/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
